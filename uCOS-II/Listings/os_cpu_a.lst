


ARM Macro Assembler    Page 1 


    1 00000000         ;=======================================================
                       =====================
    2 00000000         ; Modified from the original as follows:
    3 00000000         ; - renamed OS_CPU_PendSVHandler to CMSIS-compatible nam
                       e PendSV_Handler
    4 00000000         ;
    5 00000000         ; Quantum Leaps, LLC. www.state-machine.com
    6 00000000         ; 2015-03-23
    7 00000000         ;=======================================================
                       ====================*/
    8 00000000         ;
    9 00000000         ;*******************************************************
                       *************************************************
   10 00000000         ;                                                uC/OS-I
                       I
   11 00000000         ;                                          The Real-Time
                        Kernel
   12 00000000         ;
   13 00000000         ;
   14 00000000         ;                         (c) Copyright 2009-2013; Micri
                       um, Inc.; Weston, FL
   15 00000000         ;                    All rights reserved.  Protected by 
                       international copyright laws.
   16 00000000         ;
   17 00000000         ;                                           ARM Cortex-M
                       4 Port
   18 00000000         ;
   19 00000000         ; File      : OS_CPU_A.ASM
   20 00000000         ; Version   : V2.92.09
   21 00000000         ; By        : JJL
   22 00000000         ;             BAN
   23 00000000         ;             JBL
   24 00000000         ;
   25 00000000         ; For       : ARMv7 Cortex-M4
   26 00000000         ; Mode      : Thumb-2 ISA
   27 00000000         ; Toolchain : RealView Development Suite
   28 00000000         ;             RealView Microcontroller Development Kit (
                       MDK)
   29 00000000         ;             ARM Developer Suite (ADS)
   30 00000000         ;             Keil uVision
   31 00000000         ;*******************************************************
                       *************************************************
   32 00000000         ;
   33 00000000         
   34 00000000         ;*******************************************************
                       *************************************************
   35 00000000         ;                                          PUBLIC FUNCTI
                       ONS
   36 00000000         ;*******************************************************
                       *************************************************
   37 00000000         
   38 00000000                 EXTERN           OSRunning   ; External referenc
                                                            es
   39 00000000                 EXTERN           OSPrioCur
   40 00000000                 EXTERN           OSPrioHighRdy
   41 00000000                 EXTERN           OSTCBCur
   42 00000000                 EXTERN           OSTCBHighRdy
   43 00000000                 EXTERN           OSIntExit
   44 00000000                 EXTERN           OSTaskSwHook



ARM Macro Assembler    Page 2 


   45 00000000                 EXTERN           OS_CPU_ExceptStkBase
   46 00000000         
   47 00000000                 EXPORT           OS_CPU_SR_Save ; Functions decl
                                                            ared in this file
   48 00000000                 EXPORT           OS_CPU_SR_Restore
   49 00000000                 EXPORT           OSStartHighRdy
   50 00000000                 EXPORT           OSCtxSw
   51 00000000                 EXPORT           OSIntCtxSw
   52 00000000                 EXPORT           PendSV_Handler ; QL was: OS_CPU
                                                            _PendSVHandler
   53 00000000         
   54 00000000                 IF               {FPU} != "SoftVFP"
   55 00000000                 EXPORT           OS_CPU_FP_Reg_Push
   56 00000000                 EXPORT           OS_CPU_FP_Reg_Pop
   57 00000000                 ENDIF
   58 00000000         
   59 00000000         
   60 00000000         ;*******************************************************
                       *************************************************
   61 00000000         ;                                               EQUATES
   62 00000000         ;*******************************************************
                       *************************************************
   63 00000000         
   64 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   65 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; System priority r
                                                            egister (priority 1
                                                            4).
   66 00000000 000000FF 
                       NVIC_PENDSV_PRI
                               EQU              0xFF        ; PendSV priority v
                                                            alue (lowest).
   67 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   68 00000000         
   69 00000000         
   70 00000000         ;*******************************************************
                       *************************************************
   71 00000000         ;                                     CODE GENERATION DI
                       RECTIVES
   72 00000000         ;*******************************************************
                       *************************************************
   73 00000000         
   74 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   75 00000000                 THUMB
   76 00000000                 REQUIRE8
   77 00000000                 PRESERVE8
   78 00000000         
   79 00000000         
   80 00000000         ;*******************************************************
                       *************************************************
   81 00000000         ;                                   FLOATING POINT REGIS



ARM Macro Assembler    Page 3 


                       TERS PUSH
   82 00000000         ;                             void  OS_CPU_FP_Reg_Push (
                       CPU_STK  *stkPtr)
   83 00000000         ;
   84 00000000         ; Note(s) : 1) This function saves S0-S31, and FPSCR reg
                       isters of the Floating Point Unit.
   85 00000000         ;
   86 00000000         ;           2) Pseudo-code is:
   87 00000000         ;              a) Get FPSCR register value;
   88 00000000         ;              b) Push value on process stack;
   89 00000000         ;              c) Push remaining regs S0-S31 on process 
                       stack;
   90 00000000         ;              d) Update OSTCBCurPtr->StkPtr;
   91 00000000         ;*******************************************************
                       *************************************************
   92 00000000         
   93 00000000                 IF               {FPU} != "SoftVFP"
   94 00000000         
   95 00000000         OS_CPU_FP_Reg_Push
   96 00000000 F3EF 8109       MRS              R1, PSP     ; PSP is process st
                                                            ack pointer
   97 00000004 B141            CBZ              R1, OS_CPU_FP_nosave ; Skip FP 
                                                            register save the f
                                                            irst time
   98 00000006         
   99 00000006 EEF1 1A10       VMRS             R1, FPSCR
  100 0000000A F840 1D04       STR              R1, [R0, #-4]!
  101 0000000E ED20 0A20       VSTMDB           R0!, {S0-S31}
  102 00000012 4929            LDR              R1, =OSTCBCur
  103 00000014 680A            LDR              R2, [R1]
  104 00000016 6010            STR              R0, [R2]
  105 00000018         OS_CPU_FP_nosave
  106 00000018 4770            BX               LR
  107 0000001A         
  108 0000001A                 ENDIF
  109 0000001A         
  110 0000001A         
  111 0000001A         ;*******************************************************
                       *************************************************
  112 0000001A         ;                                   FLOATING POINT REGIS
                       TERS POP
  113 0000001A         ;                             void  OS_CPU_FP_Reg_Pop (C
                       PU_STK  *stkPtr)
  114 0000001A         ;
  115 0000001A         ; Note(s) : 1) This function restores S0-S31, and FPSCR 
                       registers of the Floating Point Unit.
  116 0000001A         ;
  117 0000001A         ;           2) Pseudo-code is:
  118 0000001A         ;              a) Restore regs S0-S31 of new process sta
                       ck;
  119 0000001A         ;              b) Restore FPSCR reg value
  120 0000001A         ;              c) Update OSTCBHighRdyPtr->StkPtr pointer
                        of new proces stack;
  121 0000001A         ;*******************************************************
                       *************************************************
  122 0000001A         
  123 0000001A                 IF               {FPU} != "SoftVFP"
  124 0000001A         
  125 0000001A         OS_CPU_FP_Reg_Pop



ARM Macro Assembler    Page 4 


  126 0000001A ECB0 0A20       VLDMIA           R0!, {S0-S31}
  127 0000001E C802            LDMIA            R0!, {R1}
  128 00000020 EEE1 1A10       VMSR             FPSCR, R1
  129 00000024 4925            LDR              R1, =OSTCBHighRdy
  130 00000026 680A            LDR              R2, [R1]
  131 00000028 6010            STR              R0, [R2]
  132 0000002A 4770            BX               LR
  133 0000002C         
  134 0000002C                 ENDIF
  135 0000002C         
  136 0000002C         
  137 0000002C         ;*******************************************************
                       *************************************************
  138 0000002C         ;                                   CRITICAL SECTION MET
                       HOD 3 FUNCTIONS
  139 0000002C         ;
  140 0000002C         ; Description: Disable/Enable interrupts by preserving t
                       he state of interrupts.  Generally speaking you
  141 0000002C         ;              would store the state of the interrupt di
                       sable flag in the local variable 'cpu_sr' and then
  142 0000002C         ;              disable interrupts.  'cpu_sr' is allocate
                       d in all of uC/OS-II's functions that need to
  143 0000002C         ;              disable interrupts.  You would restore th
                       e interrupt disable state by copying back 'cpu_sr'
  144 0000002C         ;              into the CPU's status register.
  145 0000002C         ;
  146 0000002C         ; Prototypes :     OS_CPU_SR  OS_CPU_SR_Save(void);
  147 0000002C         ;                  void       OS_CPU_SR_Restore(OS_CPU_S
                       R cpu_sr);
  148 0000002C         ;
  149 0000002C         ;
  150 0000002C         ; Note(s)    : 1) These functions are used in general li
                       ke this:
  151 0000002C         ;
  152 0000002C         ;                 void Task (void *p_arg)
  153 0000002C         ;                 {
  154 0000002C         ;                 #if OS_CRITICAL_METHOD == 3          /
                       * Allocate storage for CPU status register */
  155 0000002C         ;                     OS_CPU_SR  cpu_sr;
  156 0000002C         ;                 #endif
  157 0000002C         ;
  158 0000002C         ;                          :
  159 0000002C         ;                          :
  160 0000002C         ;                     OS_ENTER_CRITICAL();             /
                       * cpu_sr = OS_CPU_SaveSR();                */
  161 0000002C         ;                          :
  162 0000002C         ;                          :
  163 0000002C         ;                     OS_EXIT_CRITICAL();              /
                       * OS_CPU_RestoreSR(cpu_sr);                */
  164 0000002C         ;                          :
  165 0000002C         ;                          :
  166 0000002C         ;                 }
  167 0000002C         ;*******************************************************
                       *************************************************
  168 0000002C         
  169 0000002C         OS_CPU_SR_Save
  170 0000002C F3EF 8010       MRS              R0, PRIMASK ; Set prio int mask
                                                             to mask all (excep
                                                            t faults)



ARM Macro Assembler    Page 5 


  171 00000030 B672            CPSID            I
  172 00000032 4770            BX               LR
  173 00000034         
  174 00000034         OS_CPU_SR_Restore
  175 00000034 F380 8810       MSR              PRIMASK, R0
  176 00000038 4770            BX               LR
  177 0000003A         
  178 0000003A         
  179 0000003A         ;*******************************************************
                       *************************************************
  180 0000003A         ;                                         START MULTITAS
                       KING
  181 0000003A         ;                                      void OSStartHighR
                       dy(void)
  182 0000003A         ;
  183 0000003A         ; Note(s) : 1) This function triggers a PendSV exception
                        (essentially, causes a context switch) to cause
  184 0000003A         ;              the first task to start.
  185 0000003A         ;
  186 0000003A         ;           2) OSStartHighRdy() MUST:
  187 0000003A         ;              a) Setup PendSV exception priority to low
                       est;
  188 0000003A         ;              b) Set initial PSP to 0, to tell context 
                       switcher this is first run;
  189 0000003A         ;              c) Set the main stack to OS_CPU_ExceptStk
                       Base
  190 0000003A         ;              d) Set OSRunning to TRUE;
  191 0000003A         ;              e) Trigger PendSV exception;
  192 0000003A         ;              f) Enable interrupts (tasks will run with
                        interrupts enabled).
  193 0000003A         ;*******************************************************
                       *************************************************
  194 0000003A         
  195 0000003A         OSStartHighRdy
  196 0000003A 4821            LDR              R0, =NVIC_SYSPRI14 ; Set the Pe
                                                            ndSV exception prio
                                                            rity
  197 0000003C F04F 01FF       LDR              R1, =NVIC_PENDSV_PRI
  198 00000040 7001            STRB             R1, [R0]
  199 00000042         
  200 00000042 2000            MOVS             R0, #0      ; Set the PSP to 0 
                                                            for initial context
                                                             switch call
  201 00000044 F380 8809       MSR              PSP, R0
  202 00000048         
  203 00000048 481E            LDR              R0, =OS_CPU_ExceptStkBase ; Ini
                                                            tialize the MSP to 
                                                            the OS_CPU_ExceptSt
                                                            kBase
  204 0000004A 6801            LDR              R1, [R0]
  205 0000004C F381 8808       MSR              MSP, R1
  206 00000050         
  207 00000050 481D            LDR              R0, =OSRunning 
                                                            ; OSRunning = TRUE
  208 00000052 2101            MOVS             R1, #1
  209 00000054 7001            STRB             R1, [R0]
  210 00000056         
  211 00000056 481D            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 



ARM Macro Assembler    Page 6 


                                                            (causes context swi
                                                            tch)
  212 00000058 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  213 0000005C 6001            STR              R1, [R0]
  214 0000005E         
  215 0000005E B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
  216 00000060         
  217 00000060         OSStartHang
  218 00000060 E7FE            B                OSStartHang ; Should never get 
                                                            here
  219 00000062         
  220 00000062         
  221 00000062         ;*******************************************************
                       *************************************************
  222 00000062         ;                       PERFORM A CONTEXT SWITCH (From t
                       ask level) - OSCtxSw()
  223 00000062         ;
  224 00000062         ; Note(s) : 1) OSCtxSw() is called when OS wants to perf
                       orm a task context switch.  This function
  225 00000062         ;              triggers the PendSV exception which is wh
                       ere the real work is done.
  226 00000062         ;*******************************************************
                       *************************************************
  227 00000062         
  228 00000062         OSCtxSw
  229 00000062 481A            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  230 00000064 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  231 00000068 6001            STR              R1, [R0]
  232 0000006A 4770            BX               LR
  233 0000006C         
  234 0000006C         
  235 0000006C         ;*******************************************************
                       *************************************************
  236 0000006C         ;                   PERFORM A CONTEXT SWITCH (From inter
                       rupt level) - OSIntCtxSw()
  237 0000006C         ;
  238 0000006C         ; Note(s) : 1) OSIntCtxSw() is called by OSIntExit() whe
                       n it determines a context switch is needed as
  239 0000006C         ;              the result of an interrupt.  This functio
                       n simply triggers a PendSV exception which will
  240 0000006C         ;              be handled when there are no more interru
                       pts active and interrupts are enabled.
  241 0000006C         ;*******************************************************
                       *************************************************
  242 0000006C         
  243 0000006C         OSIntCtxSw
  244 0000006C 4817            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  245 0000006E F04F 5180       LDR              R1, =NVIC_PENDSVSET
  246 00000072 6001            STR              R1, [R0]
  247 00000074 4770            BX               LR
  248 00000076         



ARM Macro Assembler    Page 7 


  249 00000076         
  250 00000076         ;*******************************************************
                       *************************************************
  251 00000076         ;                                       HANDLE PendSV EX
                       CEPTION
  252 00000076         ;                                   void OS_CPU_PendSVHa
                       ndler(void)
  253 00000076         ;
  254 00000076         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
  255 00000076         ;              context switches with Cortex-M3.  This is
                        because the Cortex-M3 auto-saves half of the
  256 00000076         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
  257 00000076         ;              saving of R4-R11 is required and fixing u
                       p the stack pointers.  Using the PendSV exception
  258 00000076         ;              this way means that context saving and re
                       storing is identical whether it is initiated from
  259 00000076         ;              a thread or occurs due to an interrupt or
                        exception.
  260 00000076         ;
  261 00000076         ;           2) Pseudo-code is:
  262 00000076         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
  263 00000076         ;              b) Save remaining regs r4-r11 on process 
                       stack;
  264 00000076         ;              c) Save the process SP in its TCB, OSTCBC
                       ur->OSTCBStkPtr = SP;
  265 00000076         ;              d) Call OSTaskSwHook();
  266 00000076         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
  267 00000076         ;              f) Get current ready thread TCB, OSTCBCur
                        = OSTCBHighRdy;
  268 00000076         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdy->OSTCBStkPtr;
  269 00000076         ;              h) Restore R4-R11 from new process stack;
                       
  270 00000076         ;              i) Perform exception return which will re
                       store remaining context.
  271 00000076         ;
  272 00000076         ;           3) On entry into PendSV handler:
  273 00000076         ;              a) The following have been saved on the p
                       rocess stack (by processor):
  274 00000076         ;                 xPSR, PC, LR, R12, R0-R3
  275 00000076         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
  276 00000076         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
  277 00000076         ;              d) OSTCBCur      points to the OS_TCB of 
                       the task to suspend
  278 00000076         ;                 OSTCBHighRdy  points to the OS_TCB of 
                       the task to resume
  279 00000076         ;
  280 00000076         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we
  281 00000076         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
  282 00000076         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).



ARM Macro Assembler    Page 8 


  283 00000076         ;*******************************************************
                       *************************************************
  284 00000076         
  285 00000076         
  286 00000076         PendSV_Handler                       ; QL was: OS_CPU_Pe
                                                            ndSVHandler
  287 00000076 B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
  288 00000078 F3EF 8009       MRS              R0, PSP     ; PSP is process st
                                                            ack pointer
  289 0000007C B128            CBZ              R0, OS_CPU_PendSVHandler_nosave
 
                                                            ; Skip register sav
                                                            e the first time
  290 0000007E         
  291 0000007E 3820            SUBS             R0, R0, #0x20 ; Save remaining 
                                                            regs r4-11 on proce
                                                            ss stack
  292 00000080 E880 0FF0       STM              R0, {R4-R11}
  293 00000084         
  294 00000084 490C            LDR              R1, =OSTCBCur ; OSTCBCur->OSTCB
                                                            StkPtr = SP;
  295 00000086 6809            LDR              R1, [R1]
  296 00000088 6008            STR              R0, [R1]    ; R0 is SP of proce
                                                            ss being switched o
                                                            ut
  297 0000008A         
  298 0000008A         ; At this point, entire context of process has been save
                       d
  299 0000008A         OS_CPU_PendSVHandler_nosave
  300 0000008A B500            PUSH             {R14}       ; Save LR exc_retur
                                                            n value
  301 0000008C 4810            LDR              R0, =OSTaskSwHook 
                                                            ; OSTaskSwHook();
  302 0000008E 4780            BLX              R0
  303 00000090 F85D EB04       POP              {R14}
  304 00000094         
  305 00000094 480F            LDR              R0, =OSPrioCur ; OSPrioCur = OS
                                                            PrioHighRdy;
  306 00000096 4910            LDR              R1, =OSPrioHighRdy
  307 00000098 780A            LDRB             R2, [R1]
  308 0000009A 7002            STRB             R2, [R0]
  309 0000009C         
  310 0000009C 4806            LDR              R0, =OSTCBCur ; OSTCBCur  = OST
                                                            CBHighRdy;
  311 0000009E 4907            LDR              R1, =OSTCBHighRdy
  312 000000A0 680A            LDR              R2, [R1]
  313 000000A2 6002            STR              R2, [R0]
  314 000000A4         
  315 000000A4 6810            LDR              R0, [R2]    ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            Rdy->OSTCBStkPtr;
  316 000000A6 E890 0FF0       LDM              R0, {R4-R11} ; Restore r4-11 fr
                                                            om new process stac
                                                            k
  317 000000AA 3020            ADDS             R0, R0, #0x20
  318 000000AC F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP



ARM Macro Assembler    Page 9 


  319 000000B0 F04E 0EF4       ORR              LR, LR, #0xF4 ; Ensure exceptio
                                                            n return uses proce
                                                            ss stack
  320 000000B4 B662            CPSIE            I
  321 000000B6 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context
  322 000000B8         
  323 000000B8                 END
              00000000 
              00000000 
              E000ED22 
              00000000 
              00000000 
              E000ED04 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\os_cpu_a.d -o.\objects\os_cpu_a.o -I"C:\Users\Cameron
\Google Drive\SES Assignment\uCOS-II\RTE" -IC:\Keil_v5\ARM\PACK\Keil\LPC4000_DF
P\1.1.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include --predefine="__UVISION_VE
RSION SETA 517" --predefine="CORE_M4 SETA 1" --list=.\listings\os_cpu_a.lst Por
ts\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 74 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
   Uses
      None
Comment: .text unused
OSCtxSw 00000062

Symbol: OSCtxSw
   Definitions
      At line 228 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
   Uses
      At line 50 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
Comment: OSCtxSw used once
OSIntCtxSw 0000006C

Symbol: OSIntCtxSw
   Definitions
      At line 243 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
   Uses
      At line 51 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
Comment: OSIntCtxSw used once
OSStartHang 00000060

Symbol: OSStartHang
   Definitions
      At line 217 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
   Uses
      At line 218 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
Comment: OSStartHang used once
OSStartHighRdy 0000003A

Symbol: OSStartHighRdy
   Definitions
      At line 195 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
   Uses
      At line 49 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
Comment: OSStartHighRdy used once
OS_CPU_FP_Reg_Pop 0000001A

Symbol: OS_CPU_FP_Reg_Pop
   Definitions
      At line 125 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
   Uses
      At line 56 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
Comment: OS_CPU_FP_Reg_Pop used once
OS_CPU_FP_Reg_Push 00000000

Symbol: OS_CPU_FP_Reg_Push
   Definitions
      At line 95 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
   Uses
      At line 55 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
Comment: OS_CPU_FP_Reg_Push used once
OS_CPU_FP_nosave 00000018

Symbol: OS_CPU_FP_nosave



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 105 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
   Uses
      At line 97 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
Comment: OS_CPU_FP_nosave used once
OS_CPU_PendSVHandler_nosave 0000008A

Symbol: OS_CPU_PendSVHandler_nosave
   Definitions
      At line 299 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
   Uses
      At line 289 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
Comment: OS_CPU_PendSVHandler_nosave used once
OS_CPU_SR_Restore 00000034

Symbol: OS_CPU_SR_Restore
   Definitions
      At line 174 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
   Uses
      At line 48 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
Comment: OS_CPU_SR_Restore used once
OS_CPU_SR_Save 0000002C

Symbol: OS_CPU_SR_Save
   Definitions
      At line 169 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
   Uses
      At line 47 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
Comment: OS_CPU_SR_Save used once
PendSV_Handler 00000076

Symbol: PendSV_Handler
   Definitions
      At line 286 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
   Uses
      At line 52 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
Comment: PendSV_Handler used once
12 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 64 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
   Uses
      At line 211 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
      At line 229 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
      At line 244 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 67 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
   Uses
      At line 212 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
      At line 230 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
      At line 245 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm

NVIC_PENDSV_PRI 000000FF

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 66 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
   Uses
      At line 197 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 65 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
   Uses
      At line 196 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
Comment: NVIC_SYSPRI14 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 43 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
   Uses
      None
Comment: OSIntExit unused
OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 39 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
   Uses
      At line 305 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
Comment: OSPrioCur used once
OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 40 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
   Uses
      At line 306 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
Comment: OSPrioHighRdy used once
OSRunning 00000000

Symbol: OSRunning
   Definitions
      At line 38 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
   Uses
      At line 207 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
Comment: OSRunning used once
OSTCBCur 00000000

Symbol: OSTCBCur
   Definitions
      At line 41 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
   Uses
      At line 102 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
      At line 294 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
      At line 310 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm

OSTCBHighRdy 00000000

Symbol: OSTCBHighRdy
   Definitions
      At line 42 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
   Uses
      At line 129 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
      At line 311 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm

OSTaskSwHook 00000000

Symbol: OSTaskSwHook
   Definitions
      At line 44 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
   Uses
      At line 301 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
Comment: OSTaskSwHook used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

OS_CPU_ExceptStkBase 00000000

Symbol: OS_CPU_ExceptStkBase
   Definitions
      At line 45 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
   Uses
      At line 203 in file Ports\ARM-Cortex-M4\Generic\ARM\os_cpu_a.asm
Comment: OS_CPU_ExceptStkBase used once
8 symbols
359 symbols in table
